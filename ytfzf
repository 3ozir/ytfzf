#!/bin/sh

# https://github.com/pystardust/ytfzf

# DEFAULTS
title_len=60                           # Display length for title and channel name
channel_len=30
save_history=1                         # 0: history off, 1: history on
history_file=~/.cache/ytfzf_hst
preferred_format=""                    # ytdl-format (deafults to auto if format not found)"
show_format="0"                        # 1: shows all formats before proceeding
player="mpv"
player_format="mpv --ytdl-format="
FZF_DEFAULT_OPTS=""                    # reset fzf defaults

# HELPER TEXT
errinfo () { 
printf "Check for new versions and report at: https://github.com/pystardust/ytfzf\n"
}
helpinfo () {
printf "Usage: %bytfzf %b<search query>%b\n" "\033[1;32m" "\033[1;33m" "\033[0m";
printf "     -h                    Show this help text\n"; 
printf "     -H                    Choose from history \n";
printf "     -D                    Delete history\n";
printf "     -m  <search query>    Audio only (for listening to music)\n"; 
printf "     -d  <search query>    Download to current directory\n"; 
printf "     -f  <search query>    Show available formats before proceeding\n";
}
main=0

# DEP CHECK
dep_ck () {
	command -v "$1" 1>/dev/null || { printf "$1 not found. Please install it.\n" ; exit 2; }
}
dep_ck "jq"; dep_ck "youtube-dl"; dep_ck "mpv"; dep_ck "fzf"

# OPT
while getopts "hmdfDH" opt; do
	case ${opt} in
		h) 	helpinfo
			exit;
			;;
		m) 	preferred_format="bestaudio"
			;;
		d) 	player="youtube-dl"
		   	player_format="youtube-dl -f "
			;;
		f) 	show_format="1"
			;;
		H) 	
			[ $save_history -eq 1 ] && {
				[ -e "$history_file" ] || touch "$history_file" 
				hist_data="$(tac "$history_file")"
				[ -z "$hist_data" ] && printf "History is empty!\n" && exit;
				videos_data="$(echo "$hist_data"  | column -t  -o "$(printf "\t")" -s "$(printf "\t")" | uniq )"
				selected_data="$(echo "$videos_data" | fzf --delimiter="$(printf "\t")" --nth=1,2 )"
				#echo "$selected_data" | grep -o "[^ ]* *$"
				echo "$selected_data" | sed -E 's_.*\t\|([^|]+)$_\1_'
				url="$(echo "$selected_data" | sed -E 's_^.*\t\|([^|]+)$_https://www.youtube.com/watch?v=\1_')"
				main=1
				} || { printf "History is not enabled. Please enable it to use this option -H.\n";}
			;;
		D)	
			[ -e "$history_file" ] && rm "$history_file" && touch "$history_file" && printf "History has been cleared\n"
			exit;
			;;
		*)
			printf "Option not found!\n"
			helpinfo 
			exit 2;
			;;
	esac
done
shift $((OPTIND-1)) 

# MAIN
[ $main -eq 0 ] && {
[ -z "$*" ] && { helpinfo ; exit 1; }

yt_html="$(curl "https://www.youtube.com/results" -s -G --data-urlencode "search_query=$*" )"
[ -z "$yt_html" ] &&  { 
	printf "ERROR[#01]: Couldn't curl website. Please check your network and try again.\n"; 
	errinfo; exit 2; }

yt_json="$(echo "$yt_html" |sed -n '/var *ytInitialData/,$p' | tr -d '\n' |\
	sed -E 's_^.*var ytInitialData ?=__ ; s_;</script>.*__ ; s/\\L//g ' )"
[ -z "$yt_json" ] &&  { 
	printf "ERROR[#02]: Couldn't find data on site.\n";
	errinfo ; exit 2; }

videos_data="$(echo "$yt_json" | jq '..|.videoRenderer?' | sed '/^null$/d' |\
	jq '.title.runs[0].text,.longBylineText.runs[0].text,.shortViewCountText.simpleText,.lengthText.simpleText,.publishedTimeText.simpleText,.videoId' |\
	sed 's/^"//;s/"$//;s/\\"//g' | sed -E -n "s/(.{$title_len}).*/\1/;N;s/\n(.{$channel_len}).*/\n\1/;N;N;N;N;s/\n/\t|/g;p" |\
	column -t  -o "$(printf "\t")" -s "$(printf "\t")" )"
[ -z "$videos_data" ] &&  { printf "No results found. Try different keywords.\n"; errinfo ; exit 1;}

selected_data="$(echo "$videos_data" | fzf --delimiter="$(printf "\t")" --nth=1,2 )"
url="$(echo "$selected_data" | sed -E 's_.*\|([^|]+) *$_https://www.youtube.com/watch?v=\1_')"
}

[ -z "$url" ] && exit;
[ $show_format -eq 1 ] && {
	preferred_format="$(youtube-dl -F "$url" | sed '1,3d' | tac - | fzf | sed -E 's/^([^ ]*) .*/\1/')"
}

# PLAY
[ -n "$preferred_format" ] && {
	eval "$player_format""$preferred_format"  "$url" 
} || { 
	eval "$player" "$url"
} || { printf "ERROR[#03]: Couldn't play the video/audio using the current player.\n\tTry updating youtube-dl\n"; errinfo ; exit 2; }

[ $save_history -eq 1 ] && printf "%s\n" "$selected_data" >> "$history_file" ;

